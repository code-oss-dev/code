{
  "name": "git",
  "publisher": "vscode",
  "displayName": "git",
  "description": "Git",
  "version": "0.0.1",
  "engines": {
    "vscode": "^1.5.0"
  },
  "enableProposedApi": true,
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "*"
  ],
  "main": "./out/main",
  "scripts": {
    "compile": "gulp compile-extension:git",
    "watch": "gulp watch-extension:git"
  },
  "contributes": {
    "commands": [
      {
        "command": "git.refresh",
        "title": "Refresh",
        "category": "Git",
        "icon": {
          "light": "resources/icons/light/refresh.svg",
          "dark": "resources/icons/dark/refresh.svg"
        }
      },
      {
        "command": "git.openChange",
        "title": "Open Change",
        "category": "Git"
      },
      {
        "command": "git.openFile",
        "title": "Open File",
        "category": "Git"
      },
      {
        "command": "git.stage",
        "title": "Stage",
        "category": "Git",
        "icon": {
          "light": "resources/icons/light/stage.svg",
          "dark": "resources/icons/dark/stage.svg"
        }
      },
      {
        "command": "git.stageAll",
        "title": "Stage All",
        "category": "Git",
        "icon": {
          "light": "resources/icons/light/stage.svg",
          "dark": "resources/icons/dark/stage.svg"
        }
      },
      {
        "command": "git.unstage",
        "title": "Unstage",
        "category": "Git",
        "icon": {
          "light": "resources/icons/light/unstage.svg",
          "dark": "resources/icons/dark/unstage.svg"
        }
      },
      {
        "command": "git.unstageAll",
        "title": "Unstage All",
        "category": "Git",
        "icon": {
          "light": "resources/icons/light/unstage.svg",
          "dark": "resources/icons/dark/unstage.svg"
        }
      },
      {
        "command": "git.clean",
        "title": "Clean",
        "category": "Git",
        "icon": {
          "light": "resources/icons/light/clean.svg",
          "dark": "resources/icons/dark/clean.svg"
        }
      },
      {
        "command": "git.cleanAll",
        "title": "Clean All",
        "category": "Git",
        "icon": {
          "light": "resources/icons/light/clean.svg",
          "dark": "resources/icons/dark/clean.svg"
        }
      },
      {
        "command": "git.commitStaged",
        "title": "Commit Staged",
        "category": "Git"
      },
      {
        "command": "git.commitStagedSigned",
        "title": "Commit Staged (Signed Off)",
        "category": "Git"
      },
      {
        "command": "git.commitAll",
        "title": "Commit All",
        "category": "Git"
      },
      {
        "command": "git.commitAllSigned",
        "title": "Commit All (Signed Off)",
        "category": "Git"
      },
      {
        "command": "git.undoCommit",
        "title": "Undo Last Commit",
        "category": "Git"
      },
      {
        "command": "git.checkout",
        "title": "Checkout to...",
        "category": "Git"
      },
      {
        "command": "git.branch",
        "title": "Create Branch...",
        "category": "Git"
      },
      {
        "command": "git.pull",
        "title": "Pull",
        "category": "Git"
      },
      {
        "command": "git.pullRebase",
        "title": "Pull (Rebase)",
        "category": "Git"
      },
      {
        "command": "git.push",
        "title": "Push",
        "category": "Git"
      },
      {
        "command": "git.pushTo",
        "title": "Push to...",
        "category": "Git"
      },
      {
        "command": "git.sync",
        "title": "Sync",
        "category": "Git"
      },
      {
        "command": "git.publish",
        "title": "Publish",
        "category": "Git"
      },
      {
        "command": "git.showOutput",
        "title": "Show Git Output",
        "category": "Git"
      }
    ],
    "menus": {
      "scm/title": [
        {
          "command": "git.refresh",
          "group": "navigation",
          "when": "scmProvider == git"
        },
        {
          "command": "git.sync",
          "group": "1_sync",
          "when": "scmProvider == git"
        },
        {
          "command": "git.pull",
          "group": "1_sync",
          "when": "scmProvider == none"
        },
        {
          "command": "git.pullRebase",
          "group": "1_sync",
          "when": "scmProvider == none"
        },
        {
          "command": "git.push",
          "group": "1_sync",
          "when": "scmProvider == none"
        },
        {
          "command": "git.pushTo",
          "group": "1_sync",
          "when": "scmProvider == none"
        },
        {
          "command": "git.publish",
          "group": "2_publish",
          "when": "scmProvider == git"
        },
        {
          "command": "git.commitStaged",
          "group": "3_commit",
          "when": "scmProvider == none"
        },
        {
          "command": "git.commitStagedSigned",
          "group": "3_commit",
          "when": "scmProvider == none"
        },
        {
          "command": "git.commitAll",
          "group": "3_commit",
          "when": "scmProvider == none"
        },
        {
          "command": "git.commitAllSigned",
          "group": "3_commit",
          "when": "scmProvider == none"
        },
        {
          "command": "git.undoCommit",
          "group": "3_commit",
          "when": "scmProvider == none"
        },
        {
          "command": "git.unstageAll",
          "group": "4_stage",
          "when": "scmProvider == git"
        },
        {
          "command": "git.cleanAll",
          "group": "4_stage",
          "when": "scmProvider == git"
        },
        {
          "command": "git.showOutput",
          "group": "5_output",
          "when": "scmProvider == git"
        }
      ],
      "scm/resourceGroup/context": [
        {
          "command": "git.stageAll",
          "when": "scmProvider == git && scmResourceGroup == merge",
          "group": "1_modification"
        },
        {
          "command": "git.stageAll",
          "when": "scmProvider == git && scmResourceGroup == merge",
          "group": "inline"
        },
        {
          "command": "git.unstageAll",
          "when": "scmProvider == git && scmResourceGroup == index",
          "group": "1_modification"
        },
        {
          "command": "git.unstageAll",
          "when": "scmProvider == git && scmResourceGroup == index",
          "group": "inline"
        },
        {
          "command": "git.cleanAll",
          "when": "scmProvider == git && scmResourceGroup == workingTree",
          "group": "1_modification"
        },
        {
          "command": "git.stageAll",
          "when": "scmProvider == git && scmResourceGroup == workingTree",
          "group": "1_modification"
        },
        {
          "command": "git.cleanAll",
          "when": "scmProvider == git && scmResourceGroup == workingTree",
          "group": "inline"
        },
        {
          "command": "git.stageAll",
          "when": "scmProvider == git && scmResourceGroup == workingTree",
          "group": "inline"
        }
      ],
      "scm/resource/context": [
        {
          "command": "git.stage",
          "when": "scmProvider == git && scmResourceGroup == merge",
          "group": "1_modification"
        },
        {
          "command": "git.stage",
          "when": "scmProvider == git && scmResourceGroup == merge",
          "group": "inline"
        },
        {
          "command": "git.openChange",
          "when": "scmProvider == git && scmResourceGroup == index",
          "group": "navigation"
        },
        {
          "command": "git.openFile",
          "when": "scmProvider == git && scmResourceGroup == index",
          "group": "navigation"
        },
        {
          "command": "git.unstage",
          "when": "scmProvider == git && scmResourceGroup == index",
          "group": "1_modification"
        },
        {
          "command": "git.unstage",
          "when": "scmProvider == git && scmResourceGroup == index",
          "group": "inline"
        },
        {
          "command": "git.openChange",
          "when": "scmProvider == git && scmResourceGroup == workingTree",
          "group": "navigation"
        },
        {
          "command": "git.openFile",
          "when": "scmProvider == git && scmResourceGroup == workingTree",
          "group": "navigation"
        },
        {
          "command": "git.stage",
          "when": "scmProvider == git && scmResourceGroup == workingTree",
          "group": "1_modification"
        },
        {
          "command": "git.clean",
          "when": "scmProvider == git && scmResourceGroup == workingTree",
          "group": "1_modification"
        },
        {
          "command": "git.clean",
          "when": "scmProvider == git && scmResourceGroup == workingTree",
          "group": "inline"
        },
        {
          "command": "git.stage",
          "when": "scmProvider == git && scmResourceGroup == workingTree",
          "group": "inline"
        }
      ]
    },
    "languages": [
      {
        "id": "git-commit",
        "aliases": [
          "Git Commit Message",
          "git-commit"
        ],
        "filenames": [
          "COMMIT_EDITMSG",
          "MERGE_MSG"
        ],
        "configuration": "./git-commit.language-configuration.json"
      },
      {
        "id": "git-rebase",
        "aliases": [
          "Git Rebase Message",
          "git-rebase"
        ],
        "filenames": [
          "git-rebase-todo"
        ],
        "configuration": "./git-rebase.language-configuration.json"
      }
    ],
    "grammars": [
      {
        "language": "git-commit",
        "scopeName": "text.git-commit",
        "path": "./syntaxes/git-commit.tmLanguage"
      },
      {
        "language": "git-rebase",
        "scopeName": "text.git-rebase",
        "path": "./syntaxes/git-rebase.tmLanguage"
      }
    ]
  },
  "dependencies": {
    "core-decorators": "^0.14.0",
    "denodeify": "^1.2.1",
    "lodash": "^4.17.2",
    "vscode-nls": "^2.0.1"
  }
}